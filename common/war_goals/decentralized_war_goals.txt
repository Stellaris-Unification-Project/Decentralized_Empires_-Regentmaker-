wg_expansion_ultimatum = {
	casus_belli = cb_event
	cede_claims = occupied_only
	set_defender_wargoal = wg_defy_ultimatum
	allowed_peace_offers = {
		status_quo
		surrender
		demand_surrender
	}
	# threat_multiplier = 1.25
	war_exhaustion = 1.25
	potential = {
		always = no # event only
		# OR = {
		# 	has_ascension_perk = ap_decentralization
		# 	is_subject_type = member_state
		# }
		# from = { is_subject_type = member_state }
	}
	possible = {
		custom_tooltip = {
			fail_text = cannot_use_against_emperor
			OR = {
				from = { is_galactic_emperor = no }
				is_galactic_community_member = no
			}
		}
		custom_tooltip = {
			fail_text = pax_galactica_active
			NAND = {
				is_active_resolution = resolution_emperor_pax_galactica
				is_galactic_community_member = yes
				from = { is_galactic_community_member = yes }
			}
		}
	}
	on_accept = {
		custom_tooltip = wg_assert_overlordship_accept
		hidden_effect = {
			from = {
				every_system_within_border = {
					limit = {
						root = { has_claim = prev }
					}
					remove_claims = { who = root }
				}
				save_event_target_as = ultimatum_subject
				country_event = { id = decentralized.111 }
			}
		}
	}
	ai_weight = { weight = 100 }
}
# defender_wargoal only?
wg_defy_ultimatum = {
	casus_belli = cb_event
	allowed_peace_offers = {
		status_quo
		surrender
		demand_surrender
	}
	cede_claims = occupied_only
	set_defender_wargoal = wg_defy_ultimatum
	# threat_multiplier = 1.25
	war_exhaustion = 1.25
	potential = {
		always = no # event only
		# OR = {
		# 	has_ascension_perk = ap_decentralization
		# 	is_subject_type = member_state
		# }
		# from = {
	 	# 	OR = {
		# 		has_ascension_perk = ap_decentralization
		# 		is_subject_type = member_state
		# 	}
		# }
	}
	possible = {
		custom_tooltip = {
			fail_text = cannot_use_against_emperor
			OR = {
				from = { is_galactic_emperor = no }
				is_galactic_community_member = no
			}
		}
		custom_tooltip = {
			fail_text = pax_galactica_active
			NAND = {
				is_active_resolution = resolution_emperor_pax_galactica
				is_galactic_community_member = yes
				from = { is_galactic_community_member = yes }
			}
		}
	}
	# THIS = war goal country, FROM = war goal target country
	on_accept = {
		custom_tooltip = wg_revoke_claims_accept
		hidden_effect = {
			from = {
				every_system_within_border = {
					limit = {
						root = { has_claim = prev }
					}
					remove_claims = { who = root }
				}
			}
			set_subject_of = { who = none }
			if = { limit = { has_modifier = "satrapy_of_horde" }
				remove_modifier = "satrapy_of_horde"
			}
			if = { limit = { has_modifier = "SUBJECT_member_state" }
				remove_modifier = "SUBJECT_member_state"
			}
		}
		from = {
			if = {
				limit = {
					OR = {
						has_modifier = decentralized_leader
						has_modifier = electoral
					}
				}
				save_event_target_as = current_leader
				root = { # event_target:ultimatum_subject?
					country_event = { id = decentralized.204 }
				}
			} # else = { }
		}
	}
	ai_weight = { weight = 100 }
}

wg_member_trade_war = {
	casus_belli = cb_event
	allowed_peace_offers = {
		status_quo
		surrender
		demand_surrender
	}
	cede_claims = occupied_only
	set_defender_wargoal = wg_member_trade_war
	surrender_acceptance = -100
	# threat_multiplier = 1.25
	war_exhaustion = 1.25
	potential = {
		# always = no # event only
		# OR = {
		# 	has_ascension_perk = ap_decentralization
		# 	is_subject_type = member_state
		# }
		is_subject_type = member_state
		from = { is_subject_type = member_state }
	}
	possible = {
		custom_tooltip = {
			fail_text = cannot_use_against_emperor
			OR = {
				from = { is_galactic_emperor = no }
				is_galactic_community_member = no
			}
		}
		custom_tooltip = {
			fail_text = pax_galactica_active
			NAND = {
				is_active_resolution = resolution_emperor_pax_galactica
				is_galactic_community_member = yes
				from = { is_galactic_community_member = yes }
			}
		}
	}

	on_accept = {
		custom_tooltip = wg_plunder_accept_them
		if = {
			limit = {
				from = { num_owned_planets <= 1 }
			}
			custom_tooltip = wg_plunder_accept_us_1
			hidden_effect = {
				add_resource = {
					energy = 500
					minerals = 500
				}
			}
		} else_if = {
			limit = {
				from = {
					num_owned_planets >= 2
					num_owned_planets <= 6
				}
			}
			custom_tooltip = wg_plunder_accept_us_2
			hidden_effect = {
				add_resource = {
					energy = 1000
					minerals = 1000
				}
			}
		} else_if = {
			limit = {
				from = {
					num_owned_planets >= 7
					num_owned_planets <= 9
				}
			}
			custom_tooltip = wg_plunder_accept_us_3
			hidden_effect = {
				add_resource = {
					energy = 1500
					minerals = 1500
				}
			}
		} else_if = {
			limit = {
				from = {
					num_owned_planets >= 10
					num_owned_planets <= 12
				}
			}
			custom_tooltip = wg_plunder_accept_us_4
			hidden_effect = {
				add_resource = {
					energy = 2000
					minerals = 2000
				}
			}
		} else_if = {
			limit = {
				from = {
					num_owned_planets >= 13
					num_owned_planets <= 15
				}
			}
			custom_tooltip = wg_plunder_accept_us_5
			hidden_effect = {
				add_resource = {
					energy = 2500
					minerals = 2500
				}
			}
		} else_if = {
			limit = {
				from = {
					num_owned_planets >= 16
					num_owned_planets <= 18
				}
			}
			custom_tooltip = wg_plunder_accept_us_6
			hidden_effect = {
				add_resource = {
					energy = 3000
					minerals = 3000
				}
			}
		} else_if = {
			limit = {
				from = {
					num_owned_planets >= 19
					num_owned_planets <= 21
				}
			}
			custom_tooltip = wg_plunder_accept_us_7
			hidden_effect = {
				add_resource = {
					energy = 3500
					minerals = 3500
				}
			}
		} else_if = {
			limit = {
				from = {
					num_owned_planets >= 22
					num_owned_planets <= 24
				}
			}
			custom_tooltip = wg_plunder_accept_us_8
			hidden_effect = {
				add_resource = {
					energy = 4000
					minerals = 4000
				}
			}
		} else_if = {
			limit = {
				from = {
					num_owned_planets >= 25
					num_owned_planets <= 27
				}
			}
			custom_tooltip = wg_plunder_accept_us_9
			hidden_effect = {
				add_resource = {
					energy = 4500
					minerals = 4500
				}
			}
		} else_if = {
			limit = {
				from = {
					num_owned_planets >= 28
					num_owned_planets <= 30
				}
			}
			custom_tooltip = wg_plunder_accept_us_10
			hidden_effect = {
				add_resource = {
					energy = 5000
					minerals = 5000
				}
			}
		} else_if = {
			limit = {
				from = {
					num_owned_planets >= 31
					num_owned_planets <= 33
				}
			}
			custom_tooltip = wg_plunder_accept_us_11
			hidden_effect = {
				add_resource = {
					energy = 5500
					minerals = 5500
				}
			}
		} else_if = {
			limit = {
				from = {
					num_owned_planets >= 34
					num_owned_planets <= 36
				}
			}
			custom_tooltip = wg_plunder_accept_us_12
			hidden_effect = {
				add_resource = {
					energy = 6000
					minerals = 6000
				}
			}
		} else_if = {
			limit = {
				from = {
					num_owned_planets >= 37
					num_owned_planets <= 39
				}
			}
			custom_tooltip = wg_plunder_accept_us_13
			hidden_effect = {
				add_resource = {
					energy = 6500
					minerals = 6500
				}
			}
		} else_if = {
			limit = {
				from = {
					num_owned_planets >= 40
					num_owned_planets <= 42
				}
			}
			custom_tooltip = wg_plunder_accept_us_14
			hidden_effect = {
				add_resource = {
					energy = 7000
					minerals = 7000
				}
			}
		} else_if = {
			limit = {
				from = {
					num_owned_planets >= 43
					num_owned_planets <= 45
				}
			}
			custom_tooltip = wg_plunder_accept_us_15
			hidden_effect = {
				add_resource = {
					energy = 7500
					minerals = 7500
				}
			}
		} else_if = {
			limit = {
				from = {
					num_owned_planets >= 46
					num_owned_planets <= 48
				}
			}
			custom_tooltip = wg_plunder_accept_us_16
			hidden_effect = {
				add_resource = {
					energy = 8000
					minerals = 8000
				}
			}
		} else_if = {
			limit = {
				from = {
					num_owned_planets >= 49
					num_owned_planets <= 51
				}
			}
			custom_tooltip = wg_plunder_accept_us_17
			hidden_effect = {
				add_resource = {
					energy = 8500
					minerals = 8500
				}
			}
		} else_if = {
			limit = {
				from = {
					num_owned_planets >= 52
					num_owned_planets <= 54
				}
			}
			custom_tooltip = wg_plunder_accept_us_18
			hidden_effect = {
				add_resource = {
					energy = 9000
					minerals = 9000
				}
			}
		} else_if = {
			limit = {
				from = {
					num_owned_planets >= 55
					num_owned_planets <= 57
				}
			}
			custom_tooltip = wg_plunder_accept_us_19
			hidden_effect = {
				add_resource = {
					energy = 9500
					minerals = 9500
				}
			}
		} else_if = {
			limit = {
				from = { num_owned_planets >= 58 }
			}
			custom_tooltip = wg_plunder_accept_us_20
			hidden_effect = {
				add_resource = {
					energy = 10000
					minerals = 10000
				}
			}
		}
		hidden_effect = {
			from = {
				add_modifier = { modifier = raided days = 3600 }
			}
		}
	}
	# this = attacker
	# from = defender
	# fromfrom = war (unsure)
	on_wargoal_set = {
 		# remove overlord as war_participant
		if = {
			limit = {
				# exists = from
				from = {
					is_overlord = yes
					OR = {
						has_modifier = decentralized_leader
						has_modifier = electoral
					}
				}
			}
			from = { save_event_target_as = decentralizer }
		} else_if = {
			limit = {
				is_overlord = yes
				OR = {
					has_modifier = decentralized_leader
					has_modifier = electoral
				}
			}
			save_event_target_as = decentralizer
		}
		if = {
			limit = {
				exists = event_target:decentralizer
			}
			event_target:decentralizer = {
				random_war = {
					limit = {
						is_war_participant = { who = root }
						is_war_participant = { who = from }
						any_war_participant = {
							prev = {
								using_war_goal = { type = wg_member_trade_war owner = prev }
							}
						}
					}
					random_defender = {
						limit = { is_same_empire = prevprev }
						prev = { remove_war_participant = prev }
					}
				}
			}
		}
	}
	ai_weight = { weight = 100 } # TODO
}

wg_demand_system = {
	casus_belli = cb_event
	allowed_peace_offers = {
		status_quo
		surrender
		demand_surrender
	}
	cede_claims = occupied_only
	set_defender_wargoal = wg_defend_system
	# threat_multiplier = 1.25
	potential = {
		# always = no # event only
		# OR = {
		# 	has_ascension_perk = ap_decentralization
		# 	is_subject_type = member_state
		# }
		is_subject_type = member_state
		from = { is_subject_type = member_state }
	}
	possible = {
		custom_tooltip = {
			fail_text = cannot_use_against_emperor
			OR = {
				from = { is_galactic_emperor = no }
				is_galactic_community_member = no
			}
		}
		custom_tooltip = {
			fail_text = pax_galactica_active
			NAND = {
				is_active_resolution = resolution_emperor_pax_galactica
				is_galactic_community_member = yes
				from = { is_galactic_community_member = yes }
			}
		}
	}

	on_accept = {
		custom_tooltip = wg_assert_overlordship_accept
		hidden_effect = {
			from = {
				every_system_within_border = {
					limit = {
						root = { has_claim = prev }
					}
					remove_claims = { who = root }
				}
			}
			event_target:target_system = {
				starbase = { set_owner = event_target:demander }
			}
		}
	}
	# this = attacker
	# from = defender
	# fromfrom = war (unsure)
	on_wargoal_set = {
 		# remove overlord as war_participant
		if = {
			limit = {
				# exists = from
				from = {
					is_overlord = yes
					OR = {
						has_modifier = decentralized_leader
						has_modifier = electoral
					}
				}
			}
			from = { save_event_target_as = decentralizer }
		} else_if = {
			limit = {
				is_overlord = yes
				OR = {
					has_modifier = decentralized_leader
					has_modifier = electoral
				}
			}
			save_event_target_as = decentralizer
		}
		if = {
			limit = { exists = event_target:decentralizer }
			event_target:decentralizer = {
				random_war = {
					limit = {
						is_war_participant = { who = root }
						is_war_participant = { who = from }
						any_war_participant = {
							prev = {
								using_war_goal = { type = wg_demand_system owner = prev }
							}
						}
					}
					random_defender = {
						limit = { is_same_empire = prevprev }
						prev = { remove_war_participant = prev }
					}
				}
			}
		}
	}
	ai_weight = { weight = 100 }
}

wg_defend_system = {
	casus_belli = cb_event
	allowed_peace_offers = {
		status_quo
		surrender
		demand_surrender
	}
	cede_claims = occupied_only
	set_defender_wargoal = wg_defend_system
	# threat_multiplier = 1.25
	war_exhaustion = 1.25
	potential = {
		# always = no # event only
		# has_ascension_perk = ap_decentralization
		# OR = {
		# 	has_modifier = decentralized_leader
		# 	has_modifier = electoral
		# 	is_subject_type = member_state
		# }
		# from = {
		# 	OR = {
		# 		has_modifier = decentralized_leader
		# 		has_modifier = electoral
		# 		is_subject_type = member_state
		# 	}
		# }
		is_subject_type = member_state
		from = { is_subject_type = member_state }
	}
	possible = {
		custom_tooltip = {
			fail_text = cannot_use_against_emperor
			OR = {
				from = { is_galactic_emperor = no }
				is_galactic_community_member = no
			}
		}
		custom_tooltip = {
			fail_text = pax_galactica_active
			NAND = {
				is_active_resolution = resolution_emperor_pax_galactica
				is_galactic_community_member = yes
				from = { is_galactic_community_member = yes }
			}
		}
	}

	on_accept = {
		custom_tooltip = wg_assert_overlordship_accept
		hidden_effect = {
			from = {
				every_system_within_border = {
					limit = {
						root = { has_claim = prev }
					}
					remove_claims = { who = root }
				}
			}
			event_target:demander = {
				add_resource = { influence = -1000 }
			}
			event_target:demander = {
				add_modifier = { modifier = humiliated days = 3600 }
			}
		}
	}
	# this = attacker
	# from = defender
	# fromfrom = war (unsure)
	on_wargoal_set = {
 		# remove overlord as war_participant
		if = {
			limit = {
				# exists = from
				from = {
					is_overlord = yes
					OR = {
						has_modifier = decentralized_leader
						has_modifier = electoral
					}
				}
			}
			from = { save_event_target_as = decentralizer }
		} else_if = {
			limit = {
				is_overlord = yes
				OR = {
					has_modifier = decentralized_leader
					has_modifier = electoral
				}
			}
			save_event_target_as = decentralizer
		}
		if = {
			limit = { exists = event_target:decentralizer }
			event_target:decentralizer = {
				random_war = {
					limit = {
						is_war_participant = { who = root }
						is_war_participant = { who = from }
						any_war_participant = {
							prev = {
								using_war_goal = { type = wg_defend_system owner = prev }
							}
						}
					}
					random_defender = {
						limit = { is_same_empire = prevprev }
						prev = { remove_war_participant = prev }
					}
				}
			}
		}
	}
	ai_weight = { weight = 100 }
}

wg_forced_decentralization = {
	casus_belli = cb_decentralized
	allowed_peace_offers = {
		status_quo
		surrender
		demand_surrender
	}
	surrender_acceptance = -100
	release_occupied_systems_on_status_quo = yes
	cede_claims = no
	hide_if_no_cb = yes
	potential = {
		has_ascension_perk = ap_decentralization
		from = { is_gestalt = no num_sectors > 1 }
		NOR = {
			has_valid_civic = civic_inwards_perfection
			has_authority = auth_corporate
			has_total_war_cb = yes
		}
		NAND = {
			is_galactic_emperor = yes
			from = { is_galactic_community_member = yes }
		}
	}
	possible = {
		custom_tooltip = {
			fail_text = has_claimed_all_systems
			from = {
				is_country_type = default
				any_owned_planet = {
					is_colony = yes
					from = {
						NOT = { has_claim = prev.solar_system }
					}
				}
			}
		}
		custom_tooltip = {
			fail_text = cannot_subjugate_empire_member
			NAND = {
				has_galactic_emperor = yes
				is_galactic_community_member = no
				from = { is_galactic_community_member = yes }
			}
		}
		custom_tooltip = {
			fail_text = "cannot_use_against_custodian"
			from = { is_galactic_custodian = no }
		}
		custom_tooltip = {
			fail_text = "cannot_use_against_emperor"
			from = { is_galactic_emperor = no }
		}
		custom_tooltip = {
			fail_text = "cannot_use_against_btc"
			from = { has_been_declared_crisis = no }
		}
		custom_tooltip = {
			fail_text = pax_galactica_active
			NAND = {
				is_active_resolution = resolution_emperor_pax_galactica
				is_galactic_community_member = yes
				from = { is_galactic_community_member = yes }
			}
		}
	}

	# this = attacker
	# from = defender
	# fromfrom = war (unsure)
	on_accept = {
		custom_tooltip = war_goal_wg_liberation
		hidden_effect = {
			if = {
				limit = {
					is_overlord = yes
					has_ascension_perk = ap_decentralization
					NOT = { exists = event_target:decentralizer }
				}
				save_event_target_as = decentralizer
			}
			from = {
				every_system_within_border = {
					limit = {
						root = { has_claim = prev }
					}
					remove_claims = { who = root }
				}
				add_threat = { who = root amount = 0.5 }
				# save_event_target_as = subject_defender
				country_event = { id = decentralized.111 }
			}
		}
	}
	# Scope root/from is not fully clear (possible both swap)
	on_status_quo = {
		if = {
			limit = {
				exists = last_created_country
				last_created_country = { has_country_flag = released_empire } # vanilla
			}
			if = {
				limit = {
					OR = {
						AND ={
							exists = event_target:decentralizer
							is_same_empire = event_target:decentralizer
						}
						has_ascension_perk = ap_decentralization
					}
				}
				if = { limit = { exists = from from = { is_overlord = yes } }
					from = { save_event_target_as = decentralizer }
				} else_if = {
					limit = { is_overlord = yes }
					save_event_target_as = decentralizer
				}
				last_created_country = {
					set_subject_of = {
						who = root
						subject_type = member_state
					}

					if = { # For decentralized.111
						limit = { event_target:decentralizer = { num_sectors < 3 } }
						save_event_target_as = new_member_state
					}

					country_event = { id = decentralized.209 } # get it
				}
			}
		}
		if = {
			limit = { exists = from }
			from = {
				if = {
					limit = {
						is_overlord = yes
						NAND = {
							exists = event_target:decentralizer
							is_same_empire = event_target:decentralizer
						}
					}
					save_event_target_as = decentralizer
				}
				## Near identically to on_accept, except the subject size and target.
				country_event = { id = decentralized.111 days = 2 }
			}
		}

	}
	# this = attacker
	# from = defender
	# fromfrom = war (unsure)
	on_wargoal_set = {
		if = { limit = { has_ascension_perk = ap_decentralization is_overlord = yes }
			save_event_target_as = decentralizer
		}
	}

	#TODO
	ai_weight = {
		weight = 1
		modifier = {
			factor = 0
			NOT = { has_ascension_perk = ap_decentralization }
		}
	}
}

wg_independence = {
	casus_belli = cb_subject

	hide_if_no_cb = yes
	set_defender_wargoal = wg_assert_overlordship

	potential = { always = yes }
	possible = {
		custom_tooltip = {
			fail_text = cannot_use_against_emperor
			OR = {
				from = { is_galactic_emperor = no }
				is_galactic_community_member = no
			}
		}
		custom_tooltip = {
			fail_text = pax_galactica_active
			NAND = {
				is_active_resolution = resolution_emperor_pax_galactica
				is_galactic_community_member = yes
				from = { is_galactic_community_member = yes }
			}
		}
	}

	allowed_peace_offers = {
		status_quo
		surrender
		demand_surrender
	}

	on_status_quo = {
		custom_tooltip = wg_independence_status_quo
		hidden_effect = {
			set_subject_of = { who = none }
			if = { limit = { has_modifier = "satrapy_of_horde" }
				remove_modifier = "satrapy_of_horde"
			}
			if = { limit = { has_modifier = "SUBJECT_member_state" }
				remove_modifier = "SUBJECT_member_state"
			}
		}
	}

	on_accept = {
		custom_tooltip = wg_independence_accept
		hidden_effect = {
			set_subject_of = { who = none }
			if = { limit = { has_modifier = "satrapy_of_horde" }
				remove_modifier = "satrapy_of_horde"
			}
			if = { limit = { has_modifier = "SUBJECT_member_state" }
				remove_modifier = "SUBJECT_member_state"
			}
			every_system_within_border = {
				limit = { from = { has_claim = prev } }
				remove_claims = { who = from }
			}
		}
	}

	on_wargoal_set = {
		every_system_within_border = {
			limit = {
				NOT = { from = { has_claim = prev } }
			}
			add_claims = { who = from }
		}

		if = {
			limit = {
				has_global_flag = marauder_crisis_ongoing
				# exists = from
				from = { is_country_type = awakened_marauders }
			}
			country_event = { id = marauder.554 } # Rebel
			# set_subject_of = { who = none }
			# set_country_flag = rebelling_satrapy
			# remove_modifier = "satrapy_of_horde"
			# from = {
			# 	set_faction_hostility = {
			# 		target = root
			# 		set_hostile = yes
			# 		set_neutral = no
			# 		set_friendly = no
			# 	}
			# }
			# fromfrom = { # war scope seems only work for on_accept
			if = {
				limit = {
					any_war = {
						is_war_participant = { who = root side = attackers }
						# any_war_participant = {
						any_attacker = {
							NOT = { is_same_empire = root }
							prev = { using_war_goal = { type = "wg_independence" owner = prev } }
						}
					}
				}
				random_war = {
					limit = {
						is_war_participant = { who = root side = attackers }
						# any_war_participant = {
						any_attacker = {
							prev = { using_war_goal = { type = "wg_independence" owner = prev } }
						}
						any_defender = { is_same_empire = from }
					}
					# every_war_participant = {
					every_attacker = {
						limit = {
							is_subject = yes
							# from = { is_overlord_to = prev } not working for Khan
							overlord = { is_same_empire = from }
							# prev = {
							# 	is_war_participant = { who = prev side = attackers }
							# 	# using_war_goal = { type = "wg_independence" owner = prev }
							# }
						}
						if = {
							limit = { has_modifier = "satrapy_of_horde" }
							country_event = { id = marauder.554 } # Rebel
						} else = {
							set_subject_of = { who = none }
						}
					}
					# Remove all non marauder related from war
					every_defender = {
						limit = {
							NOR = {
								is_same_empire = from
								has_origin = "origin_khan_successor"
								AND = {
									has_global_flag = gf_great_khan_active
									is_subject_type = war_satrapy
								}
							}
							NOR = {
								is_country_type = dormant_marauders
								is_country_type = ruined_marauders
								is_country_type = awakened_marauders
								is_country_type = marauder_raiders
							}
						}
						prev = { remove_war_participant = prev }
					}
				}
			}
		}
		else_if = {
			limit = {
				# exists = from
				from = {
					# is_overlord = yes
					OR = {
						has_modifier = decentralized_leader
						has_modifier = electoral
					}
				}
			}
			from = { save_event_target_as = decentralizer }
		} else_if = {
			limit = {
				# is_overlord = yes
				OR = {
					has_modifier = decentralized_leader
					has_modifier = electoral
				}
			}
			save_event_target_as = decentralizer
		}
		if = {
			limit = {
				exists = event_target:decentralizer
			}
			event_target:decentralizer = {
				random_war = { # find right war
					limit = {
						is_war_participant = { who = root }
						is_war_participant = { who = from }
						any_war_participant = {
							prev = {
								using_war_goal = { type = wg_independence owner = prev }
							}
						}
					}
					# Probably too early
					every_defender = {
						limit = {
							OR = {
								is_subject = no
								is_subject_type = member_state
							}
							NOR = {
								is_same_empire = from
								is_same_empire = event_target:decentralizer
							}
						}
						prev = { remove_war_participant = prev }
					}
				}
			}
		}
	}

	ai_weight = { weight = 100 }
}
